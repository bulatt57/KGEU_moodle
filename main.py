import re
import requests
import json
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from special_parsing_class import DualKeyDict
import asyncio

API_TOKEN = '7865333406:AAH24rbw85Y4qmCSrsGGNlEkfP5cRFN5ZmI'
JSON_FILE = 'user_data.json'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
storage = MemoryStorage()
router = Router()
dp.include_router(router)

user_sessions = {}
login_url = "https://lms.kgeu.ru/login/index.php"
search_url = "https://lms.kgeu.ru/course/search.php?search="

back_button = KeyboardButton(text='–ù–∞–∑–∞–¥')
new_user_button = KeyboardButton(text='–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
auth_user_button = KeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º')
my_courses_button = KeyboardButton(text="–ú–æ–∏ –∫—É—Ä—Å—ã")
new_course_registration_button = KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–π –∫—É—Ä—Å moodle')

def load_user_data():
    try:
        with open(JSON_FILE, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(JSON_FILE, 'w') as file:
        json.dump(data, file, indent=2)

def paginate_text(content):
    chars_per_page = 4000
    pages = []
    current_page = ""
    for line in content.split("\n"):
        if len(current_page) + len(line) + 1 > chars_per_page:
            pages.append(current_page)
            current_page = line
        else:
            current_page += ("\n" if current_page else "") + line
    if current_page:
        pages.append(current_page)
    return pages

def get_pagination_keyboard(current_page, total_pages):
    keyboard = []
    if current_page > 1:
        keyboard.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{current_page - 1}"))
    if current_page < total_pages:
        keyboard.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page:{current_page + 1}"))
    return InlineKeyboardMarkup(inline_keyboard=[keyboard])

class CourseFindForm(StatesGroup):
    waiting_for_course_name_to_find = State()

class CourseParsingForm(StatesGroup):
    waiting_for_course_name_to_parse = State()
    waiting_course_selection = State()

class CourseRegistrationForm(StatesGroup):
    waiting_for_course_name_or_id = State()
    waiting_for_course_selection = State()
    waiting_confirmation = State()

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "username": "", "password": "", "payload": None,
            "courses_dict": None, "src_course": None,
            "section_course_dict": None, "session": requests.Session(),
            "keyboard": [new_user_button, auth_user_button]
        }
    builder = ReplyKeyboardBuilder()
    builder.add(*user_sessions[user_id]["keyboard"])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(lambda message: message.text == '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
async def handle_new_user(message: types.Message):
    user_id = str(message.from_user.id)
    user_sessions[user_id] = {
        "username": "", "password": "", "payload": None,
        "courses_dict": None, "src_course": None,
        "section_course_dict": None, "session": requests.Session(),
        "keyboard": [back_button]
    }
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Moodle:")

@router.message(lambda message: message.text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º')
async def handle_auth(message: types.Message):
    user_id = str(message.from_user.id)
    user_data = load_user_data()
    if user_id in user_data:
        try:
            session = requests.Session()
            login_page = session.get(login_url)
            soup = BeautifulSoup(login_page.content, 'html.parser')
            logintoken = soup.find('input', {'name': 'logintoken'})['value']

            payload = {
                'username': user_data[user_id]['username'],
                'password': user_data[user_id]['password'],
                'logintoken': logintoken
            }

            response = session.post(login_url, data=payload)
            if "–í—ã—Ö–æ–¥" in response.text:
                user_sessions[user_id] = {
                    "username": user_data[user_id]['username'],
                    "password": user_data[user_id]['password'],
                    "payload": payload,
                    "session": session,
                    "keyboard": [back_button, my_courses_button, new_course_registration_button]
                }
                await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                await show_main_menu(message)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

async def show_main_menu(message: types.Message):
    user_id = str(message.from_user.id)
    builder = ReplyKeyboardBuilder()
    builder.add(*user_sessions[user_id]["keyboard"])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(lambda message: message.text == '–ú–æ–∏ –∫—É—Ä—Å—ã')
async def handle_my_courses(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    try:
        session = user_sessions[user_id]["session"]
        response = session.get("https://lms.kgeu.ru/my/")
        soup = BeautifulSoup(response.text, 'html.parser')

        courses = soup.find_all('div', class_=re.compile(r'coursebox\b'))
        user_sessions[user_id]["courses_dict"] = DualKeyDict()
        course_order = []

        for course in courses:
            course_name_element = course.find(class_=re.compile(r'coursename'))
            if course_name_element:
                course_link = course_name_element.find('a')
                if course_link:
                    course_name = course_link.text.strip()
                    course_url = course_link.get('href')
                    user_sessions[user_id]["courses_dict"][course_name] = course_url
                    course_order.append(course_name)

        if not course_order:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            return

        await state.update_data(course_order=course_order)
        course_list = "\n".join([f"{idx}. {name}" for idx, name in enumerate(course_order, 1)])
        await message.answer(f"üìö –í–∞—à–∏ –∫—É—Ä—Å—ã:\n{course_list}\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        await state.set_state(CourseParsingForm.waiting_course_selection)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@router.message(CourseParsingForm.waiting_course_selection)
async def process_course_selection(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    try:
        data = await state.get_data()
        course_order = data.get("course_order", [])
        choice = int(message.text) - 1

        if 0 <= choice < len(course_order):
            course_name = course_order[choice]
            course_url = user_sessions[user_id]["courses_dict"][course_name]
            session = user_sessions[user_id]["session"]
            response = session.get(course_url)
            soup = BeautifulSoup(response.text, 'html.parser')

            content = ""
            sections = soup.find_all('li', class_='section main clearfix')
            for section in sections:
                activities = section.find_all(class_='activityinstance')
                for act in activities:
                    title = act.find(class_='instancename').text
                    link = act.find('a')['href']
                    link = f"{link}?sesskey={session.cookies.get('MoodleSession')}"
                    content += f"üîó {title}: {link}\n"

            pages = paginate_text(content)
            await state.update_data(pages=pages)
            text = pages[0] if pages else "–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            keyboard = get_pagination_keyboard(1, len(pages)) if len(pages) > 1 else None
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞")

    except ValueError:
        await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()

async def check_enrollment(session, course_url):
    response = session.get("https://lms.kgeu.ru/my/")
    soup = BeautifulSoup(response.text, 'html.parser')
    courses = soup.find_all('div', class_='coursebox')
    for course in courses:
        url = course.find('a')['href']
        if url == course_url:
            return True
    return False

@router.message(lambda message: message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–π –∫—É—Ä—Å moodle')
async def handle_course_registration(message: types.Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(CourseRegistrationForm.waiting_for_course_name_or_id)

@router.message(CourseRegistrationForm.waiting_for_course_name_or_id)
async def process_course_registration(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_input = message.text.strip()

    if user_input.lower() == '–Ω–∞–∑–∞–¥':
        await show_main_menu(message)
        await state.clear()
        return

    try:
        session = user_sessions[user_id]["session"]
        payload = user_sessions[user_id]["payload"]

        if user_input.isdigit():
            course_id = user_input
            course_url = f"https://lms.kgeu.ru/course/view.php?id={course_id}"
            response = session.get(course_url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                course_name = soup.find('h1').text.strip() if soup.find('h1') else f"–ö—É—Ä—Å —Å ID {course_id}"
                await state.update_data(course_url=course_url, course_name=course_name)
                await ask_for_enrollment(message, state)
            else:
                await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
            return

        search_response = session.get(f"{search_url}{user_input}")
        soup = BeautifulSoup(search_response.text, 'html.parser')
        courses = soup.find_all('div', class_='coursebox')

        if not courses:
            await message.answer("‚ùå –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return

        if len(courses) == 1:
            course_name = courses[0].find(class_=re.compile("coursename")).find('a').text
            course_url = courses[0].find(class_=re.compile("coursename")).find('a').get("href")
            await state.update_data(course_url=course_url, course_name=course_name)
            await ask_for_enrollment(message, state)
            return

        course_list = []
        for idx, course in enumerate(courses, 1):
            course_name = course.find(class_=re.compile("coursename")).find('a').text
            course_url = course.find(class_=re.compile("coursename")).find('a').get("href")
            course_list.append((idx, course_name, course_url))

        await state.update_data(course_list=course_list)
        courses_text = "\n".join([f"{idx}. {name}" for idx, name, _ in course_list])
        await message.answer(f"üìö –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä—Å–æ–≤:\n{courses_text}\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
        await state.set_state(CourseRegistrationForm.waiting_for_course_selection)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(CourseRegistrationForm.waiting_for_course_selection)
async def process_course_selection(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_input = message.text.strip()

    if user_input.lower() == '–Ω–∞–∑–∞–¥':
        await show_main_menu(message)
        await state.clear()
        return

    try:
        data = await state.get_data()
        course_list = data.get("course_list", [])

        if not course_list:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø—É—Å—Ç.")
            await state.clear()
            return

        try:
            selection = int(user_input)
            if 1 <= selection <= len(course_list):
                _, course_name, course_url = course_list[selection - 1]
                await state.update_data(course_url=course_url, course_name=course_name)
                await ask_for_enrollment(message, state)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def ask_for_enrollment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_name = data.get("course_name", "–∫—É—Ä—Å")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="enroll_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="enroll_no")]
    ])
    await message.answer(f"üìù –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å ¬´{course_name}¬ª?", reply_markup=keyboard)
    await state.set_state(CourseRegistrationForm.waiting_confirmation)

@router.callback_query(lambda c: c.data in ["enroll_yes", "enroll_no"])
async def handle_enrollment_decision(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = str(callback_query.from_user.id)
    data = await state.get_data()
    course_url = data.get("course_url")
    course_name = data.get("course_name", "–∫—É—Ä—Å")

    if callback_query.data == "enroll_yes":
        try:
            session = user_sessions[user_id]["session"]
            course_page = session.get(course_url)
            soup = BeautifulSoup(course_page.text, 'html.parser')

            enroll_form = soup.find('form', {'action': re.compile(r'enrol/index\.php')})
            if not enroll_form:
                await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å.")
                return

            form_action = enroll_form.get('action')
            form_data = {}
            for input_tag in enroll_form.find_all('input'):
                input_name = input_tag.get('name')
                input_value = input_tag.get('value')
                if input_name:
                    form_data[input_name] = input_value

            enroll_url = f"https://lms.kgeu.ru{form_action}" if form_action.startswith('/') else form_action
            response = session.post(enroll_url, data=form_data)

            if response.status_code == 200:
                if await check_enrollment(session, course_url):
                    await callback_query.message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å ¬´{course_name}¬ª!")
                else:
                    await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        except Exception as e:
            await callback_query.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await callback_query.message.answer("üö´ –ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()

@router.message(Command("reset"))
async def handle_reset(message: types.Message):
    user_id = str(message.from_user.id)
    user_sessions.pop(user_id, None)
    await message.answer("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
