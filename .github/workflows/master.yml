name: Master
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd KGEU_moodle
          docker build -t telegram-bot:${{ github.sha }} .
          docker tag telegram-bot:${{ github.sha }} telegram-bot:latest

      - name: Save Docker Image
        run: |
          docker save telegram-bot:${{ github.sha }} > telegram-bot.tar
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: telegram-bot.tar
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r KGEU_moodle/requirements.txt
          
      - name: Run tests
        run: |
          cd KGEU_moodle
          pytest tests.py -v

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          
      - name: Load Docker Image
        run: |
          docker load < telegram-bot.tar

      - name: Stop existing container
        run: |
          docker stop telegram-bot || true
          docker rm telegram-bot || true
        continue-on-error: true

      - name: Deploy Container
        run: |
          docker run -d \
          --name telegram-bot \
          --restart unless-stopped \
          telegram-bot:${{ github.sha }}

      - name: Verify deployment
        run: |
          sleep 10
          if ! docker ps | grep -q telegram-bot; then
            echo "Container failed to start"
            exit 1
          fi

      - name: Cleanup old images
        if: success()
        run: |
          docker image prune -f
        continue-on-error: true